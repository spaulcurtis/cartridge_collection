from django.shortcuts import render, redirect, get_object_or_404
from django.http import Http404
from django.contrib import messages
from django.db.models import Count, Sum, Q, Case, When, IntegerField
from django.core.paginator import Paginator
from django.contrib.contenttypes.models import ContentType

from .models import (
    Caliber, Country, Manufacturer, Headstamp, Load, 
    Date, Variation, Box, PrimerType, BulletType, LoadType,
    CaseType, PAColor
)

def landing(request):
    """Landing page with caliber selection"""
    # Get all calibers with artifact counts
    calibers = Caliber.objects.annotate(
        artifact_count=Count('country__manufacturer__headstamps__loads', distinct=True) + 
                      Count('country__manufacturer__headstamps__loads__dates', distinct=True) +
                      Count('country__manufacturer__headstamps__loads__load_variations', distinct=True) +
                      Count('country__manufacturer__headstamps__loads__dates__date_variations', distinct=True) +
                      Count('country__box', distinct=True)
    ).order_by('order', 'name')
    
    context = {
        'calibers': calibers,
    }
    return render(request, 'landing.html', context)

def dashboard(request, caliber_code):
    """Dashboard for a specific caliber"""
    # Get the current caliber
    caliber = get_object_or_404(Caliber, code=caliber_code, is_active=True)
    
    # Get all calibers for the dropdown
    all_calibers = Caliber.objects.all().order_by('order', 'name')
    
    # Get collection statistics
    country_content_type = ContentType.objects.get_for_model(Country)
    manufacturer_content_type = ContentType.objects.get_for_model(Manufacturer)
    headstamp_content_type = ContentType.objects.get_for_model(Headstamp)
    load_content_type = ContentType.objects.get_for_model(Load)
    date_content_type = ContentType.objects.get_for_model(Date)
    
    # Calculate stats with image counts
    stats = {
        'countries': Country.objects.filter(caliber=caliber).count(),
        'manufacturers': Manufacturer.objects.filter(country__caliber=caliber).count(),
        'headstamps': Headstamp.objects.filter(manufacturer__country__caliber=caliber).count(),
        'headstamp_images': Headstamp.objects.filter(manufacturer__country__caliber=caliber, image__isnull=False).count(),
        'loads': Load.objects.filter(headstamp__manufacturer__country__caliber=caliber).count(),
        'load_images': Load.objects.filter(headstamp__manufacturer__country__caliber=caliber, image__isnull=False).count(),
        'dates': Date.objects.filter(load__headstamp__manufacturer__country__caliber=caliber).count(),
        'date_images': Date.objects.filter(load__headstamp__manufacturer__country__caliber=caliber, image__isnull=False).count(),
        'load_variations': Variation.objects.filter(load__headstamp__manufacturer__country__caliber=caliber, load__isnull=False).count(),
        'load_variation_images': Variation.objects.filter(load__headstamp__manufacturer__country__caliber=caliber, load__isnull=False, image__isnull=False).count(),
        'date_variations': Variation.objects.filter(date__load__headstamp__manufacturer__country__caliber=caliber, date__isnull=False).count(),
        'date_variation_images': Variation.objects.filter(date__load__headstamp__manufacturer__country__caliber=caliber, date__isnull=False, image__isnull=False).count(),
        'boxes': Box.objects.filter(
            Q(content_type=country_content_type, object_id__in=Country.objects.filter(caliber=caliber).values_list('id', flat=True)) |
            Q(content_type=manufacturer_content_type, object_id__in=Manufacturer.objects.filter(country__caliber=caliber).values_list('id', flat=True)) |
            Q(content_type=headstamp_content_type, object_id__in=Headstamp.objects.filter(manufacturer__country__caliber=caliber).values_list('id', flat=True)) |
            Q(content_type=load_content_type, object_id__in=Load.objects.filter(headstamp__manufacturer__country__caliber=caliber).values_list('id', flat=True)) |
            Q(content_type=date_content_type, object_id__in=Date.objects.filter(load__headstamp__manufacturer__country__caliber=caliber).values_list('id', flat=True))
        ).count(),
        'box_images': Box.objects.filter(
            Q(content_type=country_content_type, object_id__in=Country.objects.filter(caliber=caliber).values_list('id', flat=True)) |
            Q(content_type=manufacturer_content_type, object_id__in=Manufacturer.objects.filter(country__caliber=caliber).values_list('id', flat=True)) |
            Q(content_type=headstamp_content_type, object_id__in=Headstamp.objects.filter(manufacturer__country__caliber=caliber).values_list('id', flat=True)) |
            Q(content_type=load_content_type, object_id__in=Load.objects.filter(headstamp__manufacturer__country__caliber=caliber).values_list('id', flat=True)) |
            Q(content_type=date_content_type, object_id__in=Date.objects.filter(load__headstamp__manufacturer__country__caliber=caliber).values_list('id', flat=True))
        ).filter(image__isnull=False).count(),
    }
    
    # Get recent items
    recent_headstamps = Headstamp.objects.filter(
        manufacturer__country__caliber=caliber
    ).order_by('-id')[:5]
    
    recent_loads = Load.objects.filter(
        headstamp__manufacturer__country__caliber=caliber
    ).select_related('headstamp', 'load_type').order_by('-id')[:5]
    
    recent_boxes = Box.objects.filter(
        Q(content_type=country_content_type, object_id__in=Country.objects.filter(caliber=caliber).values_list('id', flat=True)) |
        Q(content_type=manufacturer_content_type, object_id__in=Manufacturer.objects.filter(country__caliber=caliber).values_list('id', flat=True)) |
        Q(content_type=headstamp_content_type, object_id__in=Headstamp.objects.filter(manufacturer__country__caliber=caliber).values_list('id', flat=True)) |
        Q(content_type=load_content_type, object_id__in=Load.objects.filter(headstamp__manufacturer__country__caliber=caliber).values_list('id', flat=True)) |
        Q(content_type=date_content_type, object_id__in=Date.objects.filter(load__headstamp__manufacturer__country__caliber=caliber).values_list('id', flat=True))
    ).order_by('-id')[:5]
    
    context = {
        'caliber': caliber,
        'all_calibers': all_calibers,
        'stats': stats,
        'recent_headstamps': recent_headstamps,
        'recent_loads': recent_loads,
        'recent_boxes': recent_boxes,
    }
    return render(request, 'dashboard.html', context)

def country_list(request, caliber_code):
    """Display list of countries for a specific caliber"""
    caliber = get_object_or_404(Caliber, code=caliber_code, is_active=True)
    countries = Country.objects.filter(caliber=caliber).annotate(
        manufacturer_count=Count('manufacturer', distinct=True),
        headstamp_count=Count('manufacturer__headstamps', distinct=True),
        load_count=Count('manufacturer__headstamps__loads', distinct=True),
        box_count=Count('box', distinct=True)
    ).order_by('name')
    
    context = {
        'caliber': caliber,
        'countries': countries,
    }
    return render(request, 'country_list.html', context)

def record_search(request, caliber_code):
    """Search for a specific record by ID"""
    caliber = get_object_or_404(Caliber, code=caliber_code, is_active=True)
    record_id = request.GET.get('id', '').strip().upper()
    
    if not record_id:
        messages.warning(request, "Please enter a record ID")
        return redirect('dashboard', caliber_code=caliber.code)
    
    # Determine the record type based on the ID prefix
    prefix = record_id[0] if record_id else ''
    
    if prefix == 'L':
        # Search for Load
        try:
            load = Load.objects.get(
                cart_id__iexact=record_id,
                headstamp__manufacturer__country__caliber=caliber
            )
            return redirect('load_detail', caliber_code=caliber.code, pk=load.pk)
        except Load.DoesNotExist:
            pass
    
    elif prefix == 'D':
        # Search for Date
        try:
            date = Date.objects.get(
                cart_id__iexact=record_id,
                load__headstamp__manufacturer__country__caliber=caliber
            )
            return redirect('date_detail', caliber_code=caliber.code, pk=date.pk)
        except Date.DoesNotExist:
            pass
    
    elif prefix == 'V':
        # Search for Variation
        try:
            # Create a combined Q object for the caliber filter
            caliber_filter = (
                Q(load__headstamp__manufacturer__country__caliber=caliber) |
                Q(date__load__headstamp__manufacturer__country__caliber=caliber)
            )
            # Add the cart_id filter to the Q object
            full_filter = Q(cart_id__iexact=record_id) & caliber_filter
            
            # Pass the single Q object to filter() and get the first match
            variation = Variation.objects.filter(full_filter).first()
            
            if variation:
                return redirect('variation_detail', caliber_code=caliber.code, pk=variation.pk)
        except Exception:
            pass
        
    elif prefix == 'B':
        # Search for Box
        try:
            box = Box.objects.get(bid__iexact=record_id)
            # Check if the box belongs to this caliber
            if box.parent_caliber() == caliber:
                return redirect('box_detail', caliber_code=caliber.code, pk=box.pk)
        except Box.DoesNotExist:
            pass
    
    messages.warning(request, f"No record found with ID: {record_id}")
    return redirect('dashboard', caliber_code=caliber.code)

def headstamp_search(request, caliber_code):
    """Search for headstamps by name or code"""
    caliber = get_object_or_404(Caliber, code=caliber_code, is_active=True)
    query = request.GET.get('q', '').strip()
    
    if not query:
        messages.warning(request, "Please enter a search term")
        return redirect('dashboard', caliber_code=caliber.code)
    
    headstamps = Headstamp.objects.filter(
        manufacturer__country__caliber=caliber
    ).filter(
        Q(code__icontains=query) | Q(name__icontains=query)
    ).select_related('manufacturer', 'manufacturer__country').order_by('code')
    
    context = {
        'caliber': caliber,
        'headstamps': headstamps,
        'query': query,
    }
    return render(request, 'headstamp_search_results.html', context)

# Placeholder views for URLs used in the dashboard
def advanced_search(request, caliber_code):
    caliber = get_object_or_404(Caliber, code=caliber_code, is_active=True)
    return render(request, 'advanced_search.html', {'caliber': caliber})

def add_load(request, caliber_code):
    caliber = get_object_or_404(Caliber, code=caliber_code, is_active=True)
    return render(request, 'add_load.html', {'caliber': caliber})

def add_box(request, caliber_code):
    caliber = get_object_or_404(Caliber, code=caliber_code, is_active=True)
    return render(request, 'add_box.html', {'caliber': caliber})

def upload_images(request, caliber_code):
    caliber = get_object_or_404(Caliber, code=caliber_code, is_active=True)
    return render(request, 'upload_images.html', {'caliber': caliber})

def documentation(request):
    return render(request, 'documentation.html')

def support(request):
    return render(request, 'support.html')