ADDING NEW CALIBERS

Poppy definitely wants 9mm Mauser to have Load IDs starting at 1.

I'll stick with one database.  After a bit more thought, here are my plans.
1. Add a legacy_id to the BaseCollectionItem class for future flexiblity for other collectors.  It's not needed for my father.  Remove the unique=True contraint on cart_id and bid for the various artifact classes.  Do a database migration, but legacy_id will remain empty in the current database.
2. Continue fleshing out and testing the application with the existing cart_id and bid behavior.  I don't think any existing application behavior requires uniqueness of cart_id or bid.  All the URLs except the initial landing page (as you can see in attached) have a caliber.  Any new functionality added should not assume uniqueness of cart_id or bid.
3. Do database migration of the current 9mm database from the previous application.  This migration replaces all Country, Manufacturer, Headstamp, Load, Date, Variation, and Box tables with the imported tables, maintaining the same database index as well as the same cart_id and box_id.  This migration also recreates the Source tables from scratch (these tables were not in the legacy database).  
4. Change the model save code for all calibers so that next created artifact will have the next Lxxx, Dxxx, Vxxx, Bxxx cart_id/bid for this caliber, instead of the being based on the SQL database index.  Add the uniqueness constraint below.  At this point, all artifacts from migrated from the legacy database will have both SQL database indexes matching the legacy database and cart_id/bid values matching the legacy database.  But from this point moving forward the cart_id/bid will no longer correspond to database indexes.  The user will still not be able to set or modify the cart_id/bid outside of the Admin page.
5. Only at this point will the user start to add new records in the other two calibers.  Based on the new code, their cart_ids/bids will start at L1, D1, V1, and B1.  Any new 9mm cartridges added at this point will have cart_ids/bids contiguous within the 9mm collection (no longer tied to database indexes).
6. Users at this point will never need to see or understand the underlying database ID (indexes).  If they do to sort any migration questions from the initial migration, they can see those IDs in the Admin page.
7. Only after looking at new collectors migration challenges will I potentially start using the legacy_id.  But for now I will not display it or let users modify it.

Uniqueness Constraint
Since the application (not the user) sets the cart_id and bid, you don't strictly need to enforce uniqueness in the database, but it's still a good practice to prevent potential issues from coding errors or changes made through the Admin page.
Here's how you can implement a per-caliber uniqueness constraint:

from django.db import models
from django.core.exceptions import ValidationError

class Load(BaseCollectionItem):
    # Existing fields...
    
    def clean(self):
        """Ensure cart_id is unique within the caliber"""
        super().clean()
        if self.cart_id:
            caliber = self.headstamp.manufacturer.country.caliber
            # Check for other loads with the same cart_id in this caliber
            duplicate_loads = Load.objects.filter(
                headstamp__manufacturer__country__caliber=caliber,
                cart_id=self.cart_id
            ).exclude(pk=self.pk)
            
            if duplicate_loads.exists():
                raise ValidationError({
                    'cart_id': f'A load with this ID already exists in the {caliber.name} collection.'
                })
    
    def save(self, *args, **kwargs):
        self.clean()  # Run validation before saving
        super().save(*args, **kwargs)

        You would implement similar logic in the Date, Variation, and Box models. This approach:

Validates uniqueness within a caliber
Runs validation before saving
Provides a clear error message if there's a conflict

Application Structure Clarification
Your clarification about how records are added (only from parent detail pages) confirms that you shouldn't have selection issues since the parent context is always clear.
Based on everything you've shared, your plan is solid and should work well. Your app already has the caliber context in all the relevant places, and the modifications you're planning will allow for intuitive ID sequences per caliber while preserving your father's legacy database structure.
The only recommendation I would add is to ensure your admin interface shows the caliber context alongside any cart_id/bid field to avoid confusion when managing records through the admin.RetrySP


You're absolutely right to point out this issue. The Box model uses a generic foreign key relationship to associate with various parent types (Country, Manufacturer, Headstamp, Load, Date, Variation), and if cart_id is no longer globally unique, this would need to be addressed.
Looking at your Box model implementation:

class Box(BaseCollectionItem):
    bid = models.CharField("Box ID", max_length=20, unique=True)
    # ...
    
    # Generic relation to parent item
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    parent = GenericForeignKey('content_type', 'object_id')

The Box uses content_type and object_id to identify its parent, not the cart_id. The object_id refers to the primary key (database ID) of the parent object. Since the primary keys will remain globally unique across all calibers, this relationship should continue to work correctly.
However, there are a few considerations:

Box ID Uniqueness: Similar to loads, the bid field should be unique per caliber rather than globally unique. You'll need to apply the same caliber-specific numbering logic to the Box model's save method.
Parent Display: Your current get_parent_display method uses cart_id for displaying the parent:

def get_parent_display(self):
    # ...
    # First check for cart_id which is used by Load, Date, and Variation
    if hasattr(parent_obj, 'cart_id') and parent_obj.cart_id:
        return parent_obj.cart_id
    # ...

This might be confusing if you have L1 in multiple calibers. You might want to enhance this to include the caliber information:

def get_parent_display(self):
    """
    Returns a display string for the parent object with caliber context.
    """
    if not hasattr(self, 'content_type') or not hasattr(self, 'object_id'):
        return "Unknown"
    
    parent_model = self.content_type.model_class()
    
    try:
        parent_obj = parent_model.objects.get(pk=self.object_id)
        
        # Get caliber information
        caliber_code = None
        if hasattr(parent_obj, 'caliber'):
            caliber_code = parent_obj.caliber.code
        elif hasattr(parent_obj, 'country') and hasattr(parent_obj.country, 'caliber'):
            caliber_code = parent_obj.country.caliber.code
        elif hasattr(parent_obj, 'manufacturer') and hasattr(parent_obj.manufacturer, 'country'):
            caliber_code = parent_obj.manufacturer.country.caliber.code
        elif hasattr(parent_obj, 'headstamp') and hasattr(parent_obj.headstamp, 'manufacturer'):
            caliber_code = parent_obj.headstamp.manufacturer.country.caliber.code
        elif hasattr(parent_obj, 'load') and hasattr(parent_obj.load, 'headstamp'):
            caliber_code = parent_obj.load.headstamp.manufacturer.country.caliber.code
        elif hasattr(parent_obj, 'date') and hasattr(parent_obj.date, 'load'):
            caliber_code = parent_obj.date.load.headstamp.manufacturer.country.caliber.code
            
        # First check for cart_id which is used by Load, Date, and Variation
        if hasattr(parent_obj, 'cart_id') and parent_obj.cart_id:
            return f"{parent_obj.cart_id}" + (f" ({caliber_code})" if caliber_code else "")
        # Then name for Country, possibly Manufacturer 
        elif hasattr(parent_obj, 'name') and parent_obj.name:
            return parent_obj.name
        # Then code for Headstamp, Manufacturer
        elif hasattr(parent_obj, 'code') and parent_obj.code:
            return parent_obj.code
        else:
            return f"{parent_model.__name__} #{parent_obj.pk}"
    except parent_model.DoesNotExist:
        return "Not Found"

Box Parent Selection in Forms: When allowing users to select a parent for a Box in a form, you'll need to ensure the displayed cart_ids are unambiguous by including caliber information.
API Endpoints: If you have API endpoints that accept cart_id or bid as parameters, these will need to be updated to also require a caliber parameter or use the primary key instead.
Database Queries: Any queries in your codebase that look up records by cart_id instead of primary key will need to be updated to include caliber context.

The good news is that the generic foreign key relationship itself isn't affected, as it relies on the primary keys which remain globally unique. The main changes needed are in the display and interface layers to ensure clarity when dealing with potentially duplicate cart_ids across calibers.RetrySP